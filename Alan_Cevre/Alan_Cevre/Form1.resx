<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>